{
    "version": "2.0.0",
 
    "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": true,
        "panel": "shared",
        "showReuseMessage": false,
        "clear": true
    },
    
    "tasks": [
        {
            "label": "测试驱动计算",
            "detail": "一键编译、运行、测试当前活动文件",
            "type": "process",

            /**
             * 本构建脚本负责整个编译、运行、测试流程，
             * 但始终报告程序出错(如果测试全通过，报告 255，否则 报告 未通过测试的数量)。
             * 【注意：正常程序没出错会报告0(就是 main 函数通常都会返回的那个 0)，请勿与这里的妥协技巧混淆】
             *
             * 这样，VSCode 就不会启动烦人的 debugger 了；
             * 在 Windows 下，运行和测试结果也不会被启动 debugger 的终端遮挡。
             *
             * VSCode 的微软开发团队有时候是真的脑残。。。
             * 显然没有考虑广大疲于刷题的学生的痛楚(在这点上，其他 IDE 也好不到哪去)。。。
             *
             * 根本问题在于，VSCode C++ 扩展没有“运行”模式，普通运行也冠以调试的名义。。。
             * 而 Debug Console 会按照预期启动程序，但不给用户从键盘输入数据的机会(🤦‍♀️)，
             * 于是，你的程序就一直在苦苦等待你给它喂数据。。。
             * 多么直白又脑残的困局
             *
             * 欺骗它，让我们自己舒服点。
             * 学有余力的学生应该趁早用熟 Shell，
             * 领悟了直接在终端运行我的测试程序，
             * 就能对所有 IDE 一通百通了。
             *
             * 调试任务还是像之前那样启动一个“外部终端”来运行程序。
             * 有点脱了裤子那啥的意味(🤦‍♀️)。。。
             */

            "command": "raco",
            "args": [ "wizarmon", "-v", "--pretend", "255", "${file}" ],
            
            "problemMatcher": [ "$gcc" ],
            "group": "build",
            "options": { "cwd": "${fileDirname}" }
        },
        
        {
            "label": "一键调试",
            "detail": "构建当前活动文件",
            "type": "process",
            "command": "raco",
            "args": [ "wisemon", "-d", "cc-dbg", "${file}" ],
            "problemMatcher": [ "$gcc" ],
            "group": "build",
            "options": { "cwd": "${fileDirname}" }
        }
    ]
}
